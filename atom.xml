<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CHANG</title>
  
  <subtitle>所有的理想主义者都在脚踏实地</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-12-01T12:59:18.552Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Chase Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>宝贝若桐</title>
    <link href="http://yoursite.com/2019/11/03/%E5%AE%9D%E8%B4%9D%E8%8B%A5%E6%A1%90/"/>
    <id>http://yoursite.com/2019/11/03/%E5%AE%9D%E8%B4%9D%E8%8B%A5%E6%A1%90/</id>
    <published>2019-11-03T12:58:59.000Z</published>
    <updated>2019-12-01T12:59:18.552Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="Hey, password is required here." />    <label for="hbePass">Hey, password is required here.</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="f478767c5e9bdb7dfa31e73a97405d1ac0b695648e98843672e754b13650bf07"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      Here&#39;s something encrypted, password is required to continue reading.
    
    </summary>
    
    
      <category term="honey" scheme="http://yoursite.com/categories/honey/"/>
    
    
  </entry>
  
  <entry>
    <title>can2serials_lib</title>
    <link href="http://yoursite.com/2019/10/27/can2serials-lib/"/>
    <id>http://yoursite.com/2019/10/27/can2serials-lib/</id>
    <published>2019-10-27T14:43:46.000Z</published>
    <updated>2019-10-27T14:55:11.236Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CAN分析仪驱动"><a href="#CAN分析仪驱动" class="headerlink" title="CAN分析仪驱动 "></a>CAN分析仪驱动 </br></h2><p>完成CAN到串口的数据解析，同时向CAN分析仪发送数据<br></p><h3 id="数据解析流程："><a href="#数据解析流程：" class="headerlink" title="数据解析流程："></a>数据解析流程：</br></h3><h3 id="1-StarReading"><a href="#1-StarReading" class="headerlink" title="1.StarReading() :  "></a>1.<code>StarReading()</code> :  </br></h3><p>开启<code>ReadSerialPort()</code>线程</br></p><h3 id="2-ReadSerialPort"><a href="#2-ReadSerialPort" class="headerlink" title="2.ReadSerialPort() :  "></a>2.<code>ReadSerialPort()</code> :  </br></h3><p>从serial读数据到<code>buffer</code>临时变量</br></p><h3 id="3-BufferInComingData"><a href="#3-BufferInComingData" class="headerlink" title="3.BufferInComingData() :  "></a>3.<code>BufferInComingData()</code> :  </br></h3><p><strong>遍历整个</strong>从串口读到的buffer，得到一帧完整的数据存于类成员<code>data_buffer_</code>（头+数据+校验位）后，按照通信协议调用<code>parse()</code>对数据含义进行解析 </br></p><h3 id="4-prase"><a href="#4-prase" class="headerlink" title="4.prase() : "></a>4.<code>prase()</code> : </br></h3><p>解析一帧完整数据的含义，根据帧ID提取数据位。如果是下位机CAN消息，用<code>canMsg_</code>结构体变量存储CAN消息，并将其写入专门存放CAN消息的buffer<code>canMsgBuf_[]</code>中</p><p>整个ReadingSerilPort套在while循环下，保证线程持续读数据，解析数据。</p><h2 id="取消字节对齐"><a href="#取消字节对齐" class="headerlink" title="取消字节对齐"></a><strong>取消字节对齐</strong></h2><p>注意宏定义及其及使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PACK( __Declaration__ ) __Declaration__ __attribute__((__packed__))</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">PACK(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">struct stdCanMsgPkg_t &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> header1; <span class="comment">//66</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> header2; <span class="comment">//cc</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint16_t</span> pkg_len;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> pkg_cmd; <span class="comment">//B1 stdCanMsg</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> type; <span class="comment">//frame type</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint32_t</span> frame_id;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> frame_len;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> data[<span class="number">8</span>];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> checknum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">PACK(</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">struct inquireFilterResponsePkg_t &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> header1; <span class="comment">//66</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> header2; <span class="comment">//cc</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint16_t</span> pkg_len;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> pkg_cmd; <span class="comment">//9D inquire Filter Response </span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> result;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> portNum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> filterNum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint32_t</span> filterID;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint32_t</span> filterMask;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> filterMode;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    <span class="keyword">uint8_t</span> checknum;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">&#125;);</span></pre></td></tr></table></figure><h2 id="在类成员函数中开启另外一个类成员函数的线程"><a href="#在类成员函数中开启另外一个类成员函数的线程" class="headerlink" title="在类成员函数中开启另外一个类成员函数的线程"></a><strong>在类成员函数中开启另外一个类成员函数的线程</strong></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Can2serial::StartReading() </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (reading_status_)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//serial_port_-&gt;flush();</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// create thread to read from sensor</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">reading_status_=<span class="literal">true</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">read_thread_ptr_ = boost::<span class="built_in">shared_ptr</span>&lt;boost::thread &gt;(<span class="keyword">new</span> boost::thread(boost::bind(&amp;Can2serial::ReadSerialPort, <span class="keyword">this</span>)));</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="解析出一帧完整的数据包"><a href="#解析出一帧完整的数据包" class="headerlink" title="解析出一帧完整的数据包"></a><strong>解析出一帧完整的数据包</strong></h2><p>注意case2 case3 中 <code>bytes_remaining</code>的应用，该变量用于保存剩余未解析数据的长度</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> Can2serial::BufferIncomingData(<span class="keyword">unsigned</span> <span class="keyword">char</span> *message, <span class="keyword">unsigned</span> <span class="keyword">int</span> length)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line"><span class="comment">// add incoming data to buffer</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> ii=<span class="number">0</span>; ii&lt;length; ii++) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">// make sure bufIndex is not larger than buffer</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(buffer_index_&gt;=MAX_PKG_BUF_LEN)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">buffer_index_ = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">  <span class="built_in">printf</span>(<span class="string">"Overflowed receive buffer. Buffer cleared."</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//std::cout &lt;&lt; "bytes_remaining_...:" &lt;&lt;bytes_remaining_  &lt;&lt;std::endl;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(buffer_index_)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">0</span>: <span class="comment">//nothing</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(message[ii]==HeaderByte0)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">data_buffer_[buffer_index_++]=message[ii];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">bytes_remaining_ = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(message[ii]==HeaderByte1)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">data_buffer_[buffer_index_++]=message[ii];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">bytes_remaining_ =<span class="number">2</span>; <span class="comment">//2 bytes pkgLen</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">buffer_index_=<span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">bytes_remaining_ =<span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">34</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">35</span></pre></td><td class="code"><pre><span class="line">data_buffer_[buffer_index_++]=message[ii];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">36</span></pre></td><td class="code"><pre><span class="line">bytes_remaining_ --;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">37</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bytes_remaining_==<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">38</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">39</span></pre></td><td class="code"><pre><span class="line">package_len_ = (data_buffer_[buffer_index_<span class="number">-2</span>] &lt;&lt; <span class="number">8</span>)+data_buffer_[buffer_index_<span class="number">-1</span>] ;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">40</span></pre></td><td class="code"><pre><span class="line">bytes_remaining_ = package_len_;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">41</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bytes_remaining_ &gt; <span class="number">16</span> || bytes_remaining_&lt;<span class="number">2</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">42</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">43</span></pre></td><td class="code"><pre><span class="line">buffer_index_ = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">44</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">45</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">46</span></pre></td><td class="code"><pre><span class="line"><span class="comment">//printf("\t%x\t%x\n",data_buffer_[buffer_index_-2],data_buffer_[buffer_index_-1]);</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">47</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">48</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">49</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span>:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">50</span></pre></td><td class="code"><pre><span class="line">data_buffer_[buffer_index_++]=message[ii];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">51</span></pre></td><td class="code"><pre><span class="line">bytes_remaining_--;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">52</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(bytes_remaining_==<span class="number">0</span>)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">53</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">54</span></pre></td><td class="code"><pre><span class="line"> <span class="comment">//std::cout &lt;&lt; "package_len_...:" &lt;&lt;package_len_ &lt;&lt; std::endl;</span></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">55</span></pre></td><td class="code"><pre><span class="line">parse(data_buffer_,package_len_+<span class="number">4</span>);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">56</span></pre></td><td class="code"><pre><span class="line">buffer_index_ = <span class="number">0</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">57</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">58</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">59</span></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">60</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">61</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">62</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">63</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure><h2 id="ntohl-，将网络字节顺序（大端模式）转换成主机顺序（intel，小端顺序）"><a href="#ntohl-，将网络字节顺序（大端模式）转换成主机顺序（intel，小端顺序）" class="headerlink" title="ntohl()，将网络字节顺序（大端模式）转换成主机顺序（intel，小端顺序）"></a><strong>ntohl()，将网络字节顺序（大端模式）转换成主机顺序（intel，小端顺序）</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">case InquireFilterResponse:</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">if((ntohl(inquire_filter_response_ptr_-&gt;filterID)&gt;&gt;21)!&#x3D;0)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">printf(&quot;filter_num:%x\t filterID:%x\t filterMask:%x\r\n&quot;,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">inquire_filter_response_ptr_-&gt;filterNum,ntohl(inquire_filter_response_ptr_-&gt;filterID)&gt;&gt;21,</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">ntohl(inquire_filter_response_ptr_-&gt;filterMask)&gt;&gt;21);</span></pre></td></tr></table></figure><h2 id="串口初始化"><a href="#串口初始化" class="headerlink" title="串口初始化"></a><strong>串口初始化</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">static bool openSerial(serial::Serial* &amp; port_ptr, std::string port_name,int baud_rate)</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;这个地方传进来的是port_ptr引用,底下就可以修改了Serials对象了</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">try </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">port_ptr &#x3D; new serial::Serial(port_name,baud_rate,serial::Timeout::simpleTimeout(10)); </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">if (!port_ptr-&gt;isOpen())</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">        std::stringstream output;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">        output &lt;&lt; &quot;Serial port: &quot; &lt;&lt; port_name &lt;&lt; &quot; failed to open.&quot; &lt;&lt; std::endl;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">delete port_ptr;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">port_ptr &#x3D; NULL;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">14</span></pre></td><td class="code"><pre><span class="line">return false;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">15</span></pre></td><td class="code"><pre><span class="line">&#125; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">16</span></pre></td><td class="code"><pre><span class="line">else </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">17</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">18</span></pre></td><td class="code"><pre><span class="line">        std::stringstream output;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">19</span></pre></td><td class="code"><pre><span class="line">        output &lt;&lt; &quot;Serial port: &quot; &lt;&lt; port_name &lt;&lt; &quot; opened successfully.&quot; &lt;&lt; std::endl;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">20</span></pre></td><td class="code"><pre><span class="line">        std::cout &lt;&lt; output.str() &lt;&lt;std::endl;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">21</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">22</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">23</span></pre></td><td class="code"><pre><span class="line">port_ptr-&gt;flush();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">24</span></pre></td><td class="code"><pre><span class="line">&#125; </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">25</span></pre></td><td class="code"><pre><span class="line">catch (std::exception &amp;e) </span></pre></td></tr><tr><td class="gutter"><pre><span class="line">26</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">27</span></pre></td><td class="code"><pre><span class="line">    std::stringstream output;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">28</span></pre></td><td class="code"><pre><span class="line">    output &lt;&lt; &quot;Error  &quot; &lt;&lt; port_name &lt;&lt; &quot;: &quot; &lt;&lt; e.what();</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">29</span></pre></td><td class="code"><pre><span class="line">    std::cout &lt;&lt; output.str() &lt;&lt;std::endl;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">30</span></pre></td><td class="code"><pre><span class="line">    return false;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">31</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">32</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">33</span></pre></td><td class="code"><pre><span class="line">return true;</span></pre></td></tr></table></figure><h2 id="线程锁，对CAN消息的读写操作时均需要"><a href="#线程锁，对CAN消息的读写操作时均需要" class="headerlink" title="线程锁，对CAN消息的读写操作时均需要"></a><strong>线程锁，对CAN消息的读写操作时均需要</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;向canMSgBuf中写入数据</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">2</span></pre></td><td class="code"><pre><span class="line"> &#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">3</span></pre></td><td class="code"><pre><span class="line">    boost::mutex::scoped_lock lock(mutex_);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">4</span></pre></td><td class="code"><pre><span class="line">canMsgBuf_[writeIndex_] &#x3D; canMsg_;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">5</span></pre></td><td class="code"><pre><span class="line"> canMsgStatus[writeIndex_] &#x3D; true;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">6</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">7</span></pre></td><td class="code"><pre><span class="line"></span></pre></td></tr><tr><td class="gutter"><pre><span class="line">8</span></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;从canMsgBuf中读数据</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">9</span></pre></td><td class="code"><pre><span class="line">&#123;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">10</span></pre></td><td class="code"><pre><span class="line">boost::mutex::scoped_lock lock(mutex_);</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">11</span></pre></td><td class="code"><pre><span class="line">msg &#x3D; canMsgBuf_[readIndex_];</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">12</span></pre></td><td class="code"><pre><span class="line">canMsgStatus[readIndex_]&#x3D;false;</span></pre></td></tr><tr><td class="gutter"><pre><span class="line">13</span></pre></td><td class="code"><pre><span class="line">&#125;</span></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CAN分析仪驱动&quot;&gt;&lt;a href=&quot;#CAN分析仪驱动&quot; class=&quot;headerlink&quot; title=&quot;CAN分析仪驱动 &quot;&gt;&lt;/a&gt;CAN分析仪驱动 &lt;/br&gt;&lt;/h2&gt;&lt;p&gt;完成CAN到串口的数据解析，同时向CAN分析仪发送数据&lt;br&gt;&lt;/p&gt;
&lt;h3
      
    
    </summary>
    
    
      <category term="littleAntDriverless" scheme="http://yoursite.com/categories/littleAntDriverless/"/>
    
    
      <category term="CAN" scheme="http://yoursite.com/tags/CAN/"/>
    
  </entry>
  
  <entry>
    <title>建站前言</title>
    <link href="http://yoursite.com/2019/10/27/%E5%BB%BA%E7%AB%99%E5%89%8D%E8%A8%80/"/>
    <id>http://yoursite.com/2019/10/27/%E5%BB%BA%E7%AB%99%E5%89%8D%E8%A8%80/</id>
    <published>2019-10-27T07:35:39.000Z</published>
    <updated>2019-10-27T15:42:46.280Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;花了整整一个下午加一晚上的时间来配置个人博客，从最初安装Nodejs，然后在github上部署hexo整个过程遇到了不少的坑。虽说花了不少时间，但还是学到了点东西也算值得。<br><br>&emsp;这回费这么大劲建立个人博客的目的在于：</p><ol><li>督促自己复盘每月甚至每周的生活；</li><li>每次看书或者有其它提升能力的时候，可以强迫自己写笔记记录下来，有助于思考；</li><li>每当遇到网络上搜索不到的问题，解决后记录防止以后再遇到此类问题；</li><li>记录一下自己的生活,帮助自己认清自己，也帮助其他人了解我这种社交网络小透明；</li></ol><p>*<em>The one thing in my life I did right was giving my heart to you! My life has been so much better since the day that I was lucky enough to find you. *</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;花了整整一个下午加一晚上的时间来配置个人博客，从最初安装Nodejs，然后在github上部署hexo整个过程遇到了不少的坑。虽说花了不少时间，但还是学到了点东西也算值得。&lt;br&gt;&lt;br&gt;&amp;emsp;这回费这么大劲建立个人博客的目的在于：&lt;/p&gt;
&lt;ol&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="思考" scheme="http://yoursite.com/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
</feed>
